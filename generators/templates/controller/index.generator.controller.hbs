import {
Controller,
Get,
Post,
Body,
Put,
Param,
Delete,
Query,
UseGuards,
} from '@nestjs/common';
import { Types } from 'mongoose';
import { JwtAuthGuard } from '../../../infraestructure/auth/guards/jwt-auth.guard';
import { ReqUser } from '../../../infraestructure/auth/types';
import { CurrentUser } from '../../../presentation/decorators/currentUser.decorator';
import { OkResponse, Created } from '../../../presentation/filters/success.types';
import { IJsonResponse, IPaginated } from '../../../presentation/filters/json-response.contract';
import { QueryOptions } from '../../../types/query-options';
import { {{titleCase name}}Dto } from '../dto/{{camelCase name}}.dto';
import { {{titleCase name}}Service } from '../service/{{camelCase name}}.service';
import { {{titleCase name}} } from '../schema/{{camelCase name}}.schema';

@Controller('/{{camelCase name}}')
@UseGuards(JwtAuthGuard)
export class {{titleCase name}}Controller {
    constructor(
    private readonly {{camelCase name}}Service: {{titleCase name}}Service
    ) {}

    @Get('admin')
    public async findAllPaginated(
        @Query('options') options: QueryOptions
    ): Promise<IJsonResponse<IPaginated<{{titleCase name}}>>> {
        return this.{{camelCase name}}Service
          .findAllPaginated(options)
          .then((result) => new OkResponse(result));
    }

    @Get()
    public async findAll(
    ): Promise<IJsonResponse<{{titleCase name}}[]>> {
        return this.{{camelCase name}}Service
          .findAll()
          .then((result) => new OkResponse(result));
    }

    @Get(':id')
    public async findOne(@Param('id') id: string): Promise<IJsonResponse<{{titleCase name}}>> {
      return this.{{camelCase name}}Service
          .findOne(new Types.ObjectId(id))
          .then((result) => new OkResponse(result));
    }
/*
    @Get('/user/:userId')
    public async findByUserId(@Param('userId') userId: string): Promise<IJsonResponse<{{titleCase name}}[]>> {
      return this.{{camelCase name}}Service
          .findByUserId(new Types.ObjectId(userId))
          .then((result) => new OkResponse(result));
    }
*/
    @Post()
    public async create(
        @Body() dto: {{titleCase name}}Dto,
    ): Promise<IJsonResponse<{{titleCase name}}>> {
        return this.{{camelCase name}}Service
            .create(dto)
            .then((result) => new Created(result));
    }

    @Put(':id')
    public async update(
        @Body() dto: {{titleCase name}}Dto,
        @Param('id') id: string
    ): Promise<IJsonResponse<{{titleCase name}}>> {
        return this.{{camelCase name}}Service
            .update(new Types.ObjectId(id), dto)
            .then((result) => new OkResponse(result));
    }

    @Delete(':id')
    public async delete(@Param('id') id: string): Promise<IJsonResponse<string>> {
        return this.{{camelCase name}}Service
            .delete(new Types.ObjectId(id))
            .then(() => new OkResponse('Deletado com sucesso'));
    }
}