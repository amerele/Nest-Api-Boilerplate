import { Injectable } from '@nestjs/common';
import { Create{{titleCase name}}Dto } from './dto/create-{{kebabCase name}}.dto';
import { Update{{titleCase name}}Dto } from './dto/update-{{kebabCase name}}.dto';
import { {{titleCase name}}Repository } from 'src/repositories/{{kebabCase name}}.repository';
import { InjectConnection } from 'nest-knexjs';
import { Knex } from 'knex';
@Injectable()
export class {{titleCase name}}Service {
  constructor(
    @InjectConnection() private readonly knex: Knex,
    private readonly _{{camelCase name}}Repository: {{titleCase name}}Repository,
  ) {}

  public async findAll(cdCompany: number) {
    try {
      const {{titleCase name}} = await this._{{camelCase name}}Repository.findAll(this.knex, cdCompany);
      return {{titleCase name}};
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  public async create(create{{camelCase name}}Dto: Create{{titleCase name}}Dto, cdCompany:number) {
    try {
      const {{titleCase name}} = await this._{{camelCase name}}Repository.create(
        this.knex,
        create{{camelCase name}}Dto,
        cdCompany
      );
      return {{titleCase name}};
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  public async findOne(cd{{titleCase name}}: number) {
    try {
      const {{titleCase name}} = await this._{{camelCase name}}Repository.findByPrimary(
        this.knex,
        cd{{titleCase name}}
      );
      return {{titleCase name}};
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  public async update(
    cdCompany: number,
    update{{titleCase name}}Dto: Update{{titleCase name}}Dto,
  ) {
    try {
      const {{titleCase name}} = await this._{{camelCase name}}Repository.update(
        this.knex,
        cdCompany,
        update{{titleCase name}}Dto
      );
      return {{titleCase name}};
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  public async delete(cd{{titleCase name}}: number) {
    try {
      const {{titleCase name}} = await this._{{camelCase name}}Repository.delete(
        this.knex,
        cd{{titleCase name}},
      );
      return {{titleCase name}};
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
