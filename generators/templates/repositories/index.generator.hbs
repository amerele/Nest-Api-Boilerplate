import { Injectable } from '@nestjs/common';
import { {{titleCase name}} } from 'src/domain/entities/{{cammelCase name}}.entity';
import { BaseKnexRepository } from './base-knex.repository';
import { Create{{titleCase name}}Dto } from 'src/application/DTOs/{{kebabCase name}}/create-{{kebabCase name}}.dto';

@Injectable()
export class {{titleCase name}}Repository extends BaseKnexRepository {
  public async findAll(): Promise<{{titleCase name}}> {
    const knexInstance = await this.getKnexInstance();

    const {{cammelCase name}} = await knexInstance('TABELA.{{cammelCase name}}').where('').select('*');

    await this.destroyConnection(knexInstance);
    return {{cammelCase name}};
  }

  public async findByPrimary(id: string): Promise<{{titleCase name}}> {
    const knexInstance = await this.getKnexInstance();

    const {{cammelCase name}} = await knexInstance('TABELA.{{cammelCase name}}')
      .where({ id })
      .select('*');

    await this.destroyConnection(knexInstance);
    return {{cammelCase name}};
  }

  public async createOrUpdate{{titleCase name}}(
    data: Create{{titleCase name}}Dto,
    id: string,
  ): Promise<{{titleCase name}}> {
    const knexInstance = await this.getKnexInstance();

    const {{cammelCase name}} = await knexInstance('TABELA.{{cammelCase name}}')
      .upsert({ data, id })
      .returning('*');

    await this.destroyConnection(knexInstance);
    return {{cammelCase name}};
  }

  public async delete{{titleCase name}}(id: string): Promise<{{titleCase name}}> {
    const knexInstance = await this.getKnexInstance();

    const {{cammelCase name}} = await knexInstance('TABELA.{{cammelCase name}}').where({ id }).del();

    await this.destroyConnection(knexInstance);
    return {{cammelCase name}};
  }
}
