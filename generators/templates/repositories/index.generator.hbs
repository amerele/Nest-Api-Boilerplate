import { Injectable } from '@nestjs/common';
import { {{titleCase name}} } from 'src/domain/entities/{{camelCase name}}.entity';
import { BaseKnexRepository } from './base-knex.repository';
import { Body{{titleCase name}}Dto } from 'src/application/DTOs/{{kebabCase name}}/Body-{{kebabCase name}}.dto';

@Injectable()
export class {{titleCase name}}Repository extends BaseKnexRepository {
  public async findAll(): Promise<{{titleCase name}}> {
    const knexInstance = await this.getKnexInstance();

    const {{camelCase name}} = await knexInstance('TABELA.{{camelCase name}}').where('').select('*');

    await this.destroyConnection(knexInstance);
    return {{camelCase name}};
  }

  public async findByPrimary(id: number): Promise<{{titleCase name}}> {
    const knexInstance = await this.getKnexInstance();

    const {{camelCase name}} = await knexInstance('TABELA.{{camelCase name}}')
      .where({ id })
      .select('*');

    await this.destroyConnection(knexInstance);
    return {{camelCase name}};
  }

  public async createOrUpdate(
    data: Body{{titleCase name}}Dto,
    id: number,
  ): Promise<{{titleCase name}}> {
    const knexInstance = await this.getKnexInstance();

    const {{camelCase name}} = await knexInstance('TABELA.{{camelCase name}}')
      .upsert({ data, id })
      .returning('*');

    await this.destroyConnection(knexInstance);
    return {{camelCase name}};
  }

  public async delete(id: number): Promise<{{titleCase name}}> {
    const knexInstance = await this.getKnexInstance();

    const {{camelCase name}} = await knexInstance('TABELA.{{camelCase name}}').where({ id }).del();

    await this.destroyConnection(knexInstance);
    return {{camelCase name}};
  }
}
 